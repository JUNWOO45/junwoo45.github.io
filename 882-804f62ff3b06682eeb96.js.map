{"version":3,"file":"882-804f62ff3b06682eeb96.js","mappings":"6WAgBgBA,SAAAA,EAAAA,EAedC,EACAC,EACAC,GAfEC,IAAAA,EAAAA,EAAAA,MACAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,IACAC,EAAAA,EAAAA,aAAAA,EAAAA,EACAC,SAAAA,OAAAA,IAAAA,EAAAA,GAAW,EACXC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBAAAA,EAAAA,EACAC,UAAAA,OAAAA,IAAAA,EAAAA,QAAAA,EACGC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAOHC,EAMEZ,EATJD,MAIEc,EAKEb,EATJD,OAKEe,EAIEd,EATJD,OAMEgB,EAGEf,EATJD,OAOEiB,EAEEhB,EATJD,YAQmBkB,EACfjB,EATJD,gBAWMmB,EAAWC,KAAAA,UAXjBpB,GAaAQ,GAAAA,EAAAA,EAAAA,GAAAA,CACEG,UADFH,EAEEC,eAFFD,EAGEE,gBAHFF,GAAAA,GAOA,IAAMa,EACJC,EAAAA,cAAAA,EAAAA,EAACC,CAAcR,OAAdQ,EAA8BV,MAA9BU,EAA4CT,OAA7CQ,GACEA,EAAAA,cAAAA,EAAAA,GAACE,EAAAA,EAAAA,GAAAA,IACKC,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAFRH,KAcEA,EAAAA,cAAAA,EAAAA,GAACI,EAAAA,EAAAA,GAAAA,GAAAA,EACMd,CACLC,MADKD,EAELE,OAFKF,EAGLe,UAJDD,IAKKE,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EApBV,MAkCI9B,OAAAA,EAAAA,UAGE+B,EAAAA,YACG9B,EAAAA,UAEHA,EAAAA,QAAmB8B,EAAAA,WAAoB/B,EAFpCC,UAMLA,EAAAA,QAAAA,OAPE8B,MAUA9B,EAAAA,SAAoBC,EAApBD,QACI8B,EAAAA,OACAA,EAAAA,SALkBR,EAMJvB,EANIuB,SAOxBtB,EAAAA,SAAS+B,IAAU,WAKjBhC,EAAAA,UAEE+B,EAAAA,WAEF9B,EAAAA,QAAAA,OAFE8B,MAIFA,EAAAA,OAAAA,KAAiD/B,EANjDA","sources":["webpack://junwoo45.github.io/../src/components/lazy-hydrate.tsx"],"sourcesContent":["import React, { MutableRefObject } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport { getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { ReactElement } from \"react\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: (toggle: boolean) => void\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    imgClassName,\n    imgStyle = {},\n    objectPosition,\n    backgroundColor,\n    objectFit = `cover`,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>,\n  forceHydrate: MutableRefObject<boolean>\n): (() => void) | null {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  const cacheKey = JSON.stringify(images)\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      <Placeholder\n        {...getPlaceholderProps(\n          placeholder,\n          isLoaded,\n          layout,\n          width,\n          height,\n          wrapperBackgroundColor,\n          objectFit,\n          objectPosition\n        )}\n      />\n\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(\n          isLoading,\n          isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref,\n          imgStyle\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  if (root.current) {\n    // Force render to mitigate \"Expected server HTML to contain a matching\" in develop\n    // @ts-ignore react 18 typings\n    if (ReactDOM.createRoot) {\n      if (!hydrated.current) {\n        // @ts-ignore react 18 typings\n        hydrated.current = ReactDOM.createRoot(root.current)\n      }\n\n      // @ts-ignore react 18 typings\n      hydrated.current.render(component)\n    } else {\n      const doRender =\n        hydrated.current || forceHydrate.current\n          ? ReactDOM.render\n          : ReactDOM.hydrate\n      doRender(component, root.current)\n      hydrated.current = true\n    }\n  }\n\n  return (): void => {\n    if (root.current) {\n      // @ts-ignore react 18 typings\n      if (ReactDOM.createRoot) {\n        // @ts-ignore react 18 typings\n        hydrated.current.render(null)\n      } else {\n        ReactDOM.render(null as unknown as ReactElement, root.current)\n      }\n    }\n  }\n}\n"],"names":["lazyHydrate","root","hydrated","forceHydrate","image","loading","isLoading","isLoaded","toggleIsLoaded","ref","imgClassName","imgStyle","objectPosition","backgroundColor","objectFit","props","width","height","layout","images","placeholder","wrapperBackgroundColor","cacheKey","JSON","component","React","LayoutWrapper","Placeholder","getPlaceholderProps","MainImage","className","getMainProps","ReactDOM","current"],"sourceRoot":""}